(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{474:function(t,s,a){"use strict";a.r(s);var e=a(1),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"get-和-post-的区别有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别有哪些"}},[t._v("#")]),t._v(" GET 和 POST 的区别有哪些")]),t._v(" "),s("h3",{attrs:{id:"区别一-幂等性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别一-幂等性"}},[t._v("#")]),t._v(" 区别一：幂等性")]),t._v(" "),s("ul",[s("li",[t._v("由于 GET 是读，POST 是写，所以 GET 是幂等的，POST 不是幂等的。")]),t._v(" "),s("li",[t._v("由于 GET 是读，POST 是写，所以用浏览器打开网页会发送 GET 请求，想要 POST 打开网页要用 form 标签。")]),t._v(" "),s("li",[t._v("由于 GET 是读，POST 是写，所以 GET 打开的页面刷新是无害的，POST 打开的页面刷新需要确认。")]),t._v(" "),s("li",[t._v("由于 GET 是读，POST 是写，所以 GET 结果会被缓存，POST 结果不会被缓存。")]),t._v(" "),s("li",[t._v("由于 GET 是读，POST 是写，所以 GET 打开的页面可被书签收藏，POST 打开的不行。")])]),t._v(" "),s("h3",{attrs:{id:"区别二-请求参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别二-请求参数"}},[t._v("#")]),t._v(" 区别二：请求参数")]),t._v(" "),s("ul",[s("li",[t._v("通常，GET 请求参数放在 url 里，POST 请求数据放在 body（消息体）里。")]),t._v(" "),s("li",[t._v("GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。")]),t._v(" "),s("li",[t._v("GET 请求参数放在 url 里是有长度限制的，而 POST 放在 body 里没有长度限制。")])]),t._v(" "),s("h3",{attrs:{id:"区别三-tcp-packet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别三-tcp-packet"}},[t._v("#")]),t._v(" 区别三：TCP packet")]),t._v(" "),s("ul",[s("li",[t._v("GET 产生一个 TCP 数据包；POST 产生两个或以上 TCP 数据包。")])]),t._v(" "),s("h2",{attrs:{id:"http-缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[t._v("#")]),t._v(" HTTP 缓存")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("缓存（强缓存）")]),t._v(" "),s("th",[t._v("内容协商（弱缓存）")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HTTP 1.1")]),t._v(" "),s("td",[t._v("Cache-Control: max-age=3600 "),s("br"),t._v("Etag: ABC")]),t._v(" "),s("td",[t._v("If-None-Match: ABC "),s("br"),t._v("响应状态码：304 或 200")])]),t._v(" "),s("tr",[s("td",[t._v("HTTP 1.0")]),t._v(" "),s("td",[t._v("Expires: Wed, 21 Oct 2015 02:30:00 GMT "),s("br"),t._v("Last-Modified: Wed, 21 Oct 2015 01:00:00 GMT")]),t._v(" "),s("td",[t._v("If-Modified-Since: Wed, 21 Oct 2015 01:00:00 GMT "),s("br"),t._v("响应状态码：304 或 200")])])])]),t._v(" "),s("h2",{attrs:{id:"http-和-https-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https-的区别"}},[t._v("#")]),t._v(" HTTP 和 HTTPS 的区别")]),t._v(" "),s("blockquote",[s("p",[t._v("HTTPS = HTTP + SSL/TLS（安全层）")])]),t._v(" "),s("ul",[s("li",[t._v("HTTP 是明文传输的，不安全；HTTPS 是加密传输的，非常安全。")]),t._v(" "),s("li",[t._v("HTTP 使用 80 端口，HTTPS 使用 443 端口。")]),t._v(" "),s("li",[t._v("HTTP 较快，HTTPS 较慢。")]),t._v(" "),s("li",[t._v("HTTPS 的证书一般需要购买（但也有免费的），HTTP 不需要证书。")])]),t._v(" "),s("h2",{attrs:{id:"http-1-1-和-http-2-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-和-http-2-的区别"}},[t._v("#")]),t._v(" HTTP/1.1 和 HTTP/2 的区别")]),t._v(" "),s("ul",[s("li",[t._v("HTTP/2 使用了二进制传输，而且将 head 和 body 分成帧来传输；HTTP/1.1 是字符串传输。")]),t._v(" "),s("li",[t._v("HTTP/2 支持多路复用，HTTP/1.1 不支持。多路复用简单来说就是一个 TCP 连接从单车道（不是单行道）变成了几百个双向通行的车道。")]),t._v(" "),s("li",[t._v("HTTP/2 可以压缩 head，但是 HTTP/1.1 不行。")]),t._v(" "),s("li",[t._v("HTTP/2 支持服务器推送，但 HTTP/1.1 不支持。（实际上没多少人用）")])]),t._v(" "),s("h2",{attrs:{id:"tcp-三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手和四次挥手"}},[t._v("#")]),t._v(" TCP 三次握手和四次挥手")]),t._v(" "),s("h3",{attrs:{id:"建立-tcp-连接时-server-与-client-会经历三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#建立-tcp-连接时-server-与-client-会经历三次握手"}},[t._v("#")]),t._v(" 建立 TCP 连接时 server 与 client 会经历三次握手")]),t._v(" "),s("p",[t._v("1、浏览器向服务器发送 TCP 数据：SYN(seq=x)\n2、服务器向浏览器发送 TCP 数据：ACK(seq=x+1) SYN(y)\n3、浏览器向服务器发送 TCP 数据：ACK(seq=y+1)")]),t._v(" "),s("h3",{attrs:{id:"关闭-tcp-连接时-server-与-client-会经历四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭-tcp-连接时-server-与-client-会经历四次挥手"}},[t._v("#")]),t._v(" 关闭 TCP 连接时 server 与 client 会经历四次挥手")]),t._v(" "),s("p",[t._v("1、浏览器向服务器发送 TCP 数据：FIN(seq=x)\n2、服务器向浏览器发送 TCP 数据：ACK(seq=x+1)\n3、服务器向浏览器发送 TCP 数据：FIN(seq=y)\n4、浏览器向服务器发送 TCP 数据：ACK(seq=y+1)")]),t._v(" "),s("p",[t._v("为什么 2、3 步骤不合并起来呢？")]),t._v(" "),s("p",[t._v("答案：2、3 中间服务器很可能还有数据要发送，不能提前发送 FIN。")]),t._v(" "),s("h2",{attrs:{id:"同源策略和跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略和跨域"}},[t._v("#")]),t._v(" 同源策略和跨域")]),t._v(" "),s("blockquote",[s("p",[t._v("如果两个 URL 的协议、端口和域名都完全一致的话，则这两个 URL 是同源的。")])]),t._v(" "),s("h3",{attrs:{id:"解决跨域方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域方案"}},[t._v("#")]),t._v(" 解决跨域方案")]),t._v(" "),s("h4",{attrs:{id:"jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),s("ul",[s("li",[t._v("甲站点利用 script 标签可以跨域的特性，向乙站点发送 get 请求。")]),t._v(" "),s("li",[t._v("乙站点后端改造 JS 文件的内容，将数据传进回调函数。")]),t._v(" "),s("li",[t._v("甲站点通过回调函数拿到乙站点的数据。")])]),t._v(" "),s("h4",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对于简单请求，乙站点在响应头里添加 Access-Control-Allow-Origin: http://甲站点 即可。")])]),t._v(" "),s("li",[s("p",[t._v("对于复杂请求，如 PATCH，乙站点需要：")]),t._v(" "),s("ul",[s("li",[t._v("响应 OPTIONS 请求，在响应中添加如下的响应头"),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Access-Control-Allow-Origin: https://甲站点\nAccess-Control-Allow-Methods: POST, GET, OPTIONS, PATCH\nAccess-Control-Allow-Headers: Content-Type\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])]),t._v(" "),s("li",[t._v("响应 POST 请求，在响应中添加 "),s("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 头。")]),t._v(" "),s("li",[t._v("如果需要附带身份信息，JS 中需要在 AJAX 里设置 "),s("code",[t._v("xhr.withCredentials = true")]),t._v(" 。")])])]),t._v(" "),s("li",[s("p",[t._v("Nginx 代理 / Node.js 代理\n前端 ⇒ 后端 ⇒ 另一个域名的后端")])])]),t._v(" "),s("h2",{attrs:{id:"session、cookie、localstorage、sessionstorage-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session、cookie、localstorage、sessionstorage-的区别"}},[t._v("#")]),t._v(" Session、Cookie、LocalStorage、SessionStorage 的区别")]),t._v(" "),s("h3",{attrs:{id:"cookie-v-s-localstorage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie-v-s-localstorage"}},[t._v("#")]),t._v(" Cookie V.S. LocalStorage")]),t._v(" "),s("ul",[s("li",[t._v("主要区别是 Cookie 会被发送到服务器，而 LocalStorage 不会")]),t._v(" "),s("li",[t._v("Cookie 一般最大 4k，LocalStorage 可以用 5Mb 甚至 10Mb（各浏览器不同）")])]),t._v(" "),s("h3",{attrs:{id:"localstorage-v-s-sessionstorage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#localstorage-v-s-sessionstorage"}},[t._v("#")]),t._v(" LocalStorage V.S. SessionStorage")]),t._v(" "),s("ul",[s("li",[t._v("LocalStorage 一般不会自动过期（除非用户手动清除）")]),t._v(" "),s("li",[t._v("SessionStorage 在会话结束时过期（如关闭浏览器之后，具体由浏览器自行决定）")])]),t._v(" "),s("h3",{attrs:{id:"cookie-v-s-session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie-v-s-session"}},[t._v("#")]),t._v(" Cookie V.S. Session")]),t._v(" "),s("ul",[s("li",[t._v("Cookie 存在浏览器的文件里，Session 存在服务器的文件里")]),t._v(" "),s("li",[t._v("Session 是基于 Cookie 实现的，具体做法就是把 SessionID 存在 Cookie 里")])])])}),[],!1,null,null,null);s.default=v.exports}}]);